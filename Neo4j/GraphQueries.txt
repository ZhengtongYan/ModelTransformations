// Graph queries for Graph data built around the data.

MATCH p=()-[r:knows]->() RETURN p LIMIT 25

EXPLAIN MATCH p=()-[r:knows]->() RETURN p LIMIT 25

PROFILE MATCH p=()-[r:knows]->() RETURN p LIMIT 25

MATCH (n:Person { firstName: "Anna", lastName: "Gilels"}) RETURN n

MATCH (n:Person { firstName: "Hao", lastName: "Hu", id: 4398046519759}) RETURN n

MATCH p = (:Person{id:4398046519759})-[:knows]->(n:Person)-[:knows]->(:Person{id: 17592186045441})
RETURN p

// Shortest path query that uses Graph algorithms package: https://neo4j.com/docs/graph-algorithms/current/labs-algorithms/. Although documentation says that direction for edges is 'OUTGOING' by default, it seems to be 'BOTH' by default
// meaning that the algorithm treates graphs as undirected by default. The following code finds one of the shortest paths from start node to the end node so that edges are OUTGOING.

MATCH (start:Person{id:4398046519759}), (end:Person{id: 17592186045441})
CALL algo.shortestPath.stream(start, end, null, { direction: 'OUTGOING' })
YIELD nodeId, cost
RETURN algo.asNode(nodeId).firstName AS firstName, algo.asNode(nodeId).lastName AS lastName, cost

// By running the following query, you can be sure that the shortest path algorithm really worked:

MATCH (start:Person{id:4398046519759}), (middle: Person{firstName: 'Grigore', lastName:'Bologan'}), (end:Person{id: 17592186045441})
RETURN start, middle, end

// Community detection algorithms: https://neo4j.com/docs/graph-algorithms/current/algorithms/louvain/

CALL algo.louvain.stream('Person', 'knows', {})
YIELD nodeId, community
RETURN algo.asNode(nodeId).id AS user, community
ORDER BY community;

